"""
train_model.py - Random Forest Model Training for Ligand Binding Site Prediction

This script trains a **Random Forest** classifier to predict ligand binding sites based on 
features extracted from protein structures. It takes as input the feature matrix generated by 
`features.py`, along with labels indicating known binding and non-binding residues, 
and outputs a trained Random Forest model.

Functions:
1. **Load Preprocessed Data**:
   - Reads the feature matrix generated from `features.py` (e.g., CSV, NumPy array, or pickle file).
   - Loads corresponding labels from curated datasets (e.g., known ligand binding residues).

2. **Data Splitting & Normalization**:
   - Splits data into training and validation sets (e.g., 80% training, 20% validation).
   - Normalizes feature values if necessary (though Random Forest is robust to non-normalized data).

3. **Random Forest Model Training**:
   - Uses `sklearn.ensemble.RandomForestClassifier`.
   - Configurable hyperparameters: number of trees (`n_estimators`), maximum depth, and feature selection.
   - Trains the model on extracted protein features.

4. **Evaluation & Performance Metrics**:
   - Computes accuracy, precision, recall, F1-score, and ROC-AUC.
   - Saves performance metrics for later analysis.

5. **Model Saving & Exporting**:
   - Saves the trained **Random Forest** model using `joblib` for later inference in `predict.py`.
   - Outputs model metadata for reproducibility.

Expected Input:
- Feature matrix from `features.py` (e.g., CSV, NumPy array, or pickle file).
- Corresponding labels (binding vs. non-binding residues).

Expected Output:
- A trained **Random Forest** model saved in a serialized format (e.g., `.pkl` using `joblib`).
- Model performance metrics for evaluation.

Dependencies:
- NumPy, Pandas (data handling)
- Scikit-learn (Random Forest model, evaluation)
- Matplotlib / Seaborn (visualization)
- Joblib (model serialization)
"""

# Import necessary libraries
import os
import numpy as np
import pandas as pd
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
import matplotlib.pyplot as plt
import seaborn as sns

# Define the train_model function
def train_model(features_file, labels_file, output_dir=None):
    """
    Train a Random Forest model for ligand binding site prediction.
    
    Parameters:
    - features_file (str): Path to the input feature matrix file.
    - labels_file (str): Path to the input labels file.
    - output_dir (str): Directory to save the trained model and results.
    
    Returns:
    - RandomForestClassifier: Trained Random Forest model.
    - dict: Dictionary containing performance metrics.
    """
    # Load the feature matrix and labels
    X = np.load(features_file)
    y = np.load(labels_file)
    
    # Split the data into training and validation sets
    X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Initialize the Random Forest classifier
    clf = RandomForestClassifier(n_estimators=100, random_state=42)
    
    # Train the model
    clf.fit(X_train, y_train)
    
    # Make predictions on the validation set
    y_pred = clf.predict(X_valid)
    
    # Calculate performance metrics
    accuracy = accuracy_score(y_valid, y_pred)
    precision = precision_score(y_valid, y_pred)
    recall = recall_score(y_valid, y_pred)
    f1 = f1_score(y_valid, y_pred)
    roc_auc = roc_auc_score(y_valid, clf.predict_proba(X_valid)[:, 1])
    
    # Save the trained model
    if output_dir:
        os.makedirs(output_dir, exist_ok=True)
        model_path = os.path.join(output_dir, 'random_forest_model.pkl')
        joblib.dump(clf, model_path)
    
    # Display and save performance metrics
    metrics = {
        'accuracy': accuracy,
        'precision': precision,
        'recall': recall,
        'f1': f1,
        'roc_auc': roc_auc
    }
    
    print("Model training complete.")
    print("Performance metrics:")
    for metric, value in metrics.items():
        print(f"- {metric}: {value}")
    
    return clf, metrics

# Define the main function
def main():
    # Define the input files
    features_file = 'data/features.npy'
    labels_file = 'data/labels.npy'
    
    # Define the output directory
    output_dir = 'models'
    
    # Train the Random Forest model
    clf, metrics = train_model(features_file, labels_file, output_dir)
    
    # Plot feature importances
    plt.figure(figsize=(8, 6))
    importances = clf.feature_importances_
    indices = np.argsort(importances)[::-1]
    sns.barplot(x=importances[indices], y=indices)
    plt.title("Feature Importances")
    plt.show()

# Execute the main function
if __name__ == '__main__':
    main()

# Output:

# Model training complete.