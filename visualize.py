"""
visualize.py - Ligand Binding Site Visualization Using Chimera

This script generates a visualization of predicted ligand binding sites using **UCSF Chimera**.
It takes as input the original protein structure (`.pdb`) and the predicted binding residues 
from `predict.py`, then outputs a Chimera visualization script that highlights the binding sites.

Functions:
1. **Load Predicted Binding Sites**:
   - Reads the list of predicted binding residues generated by `predict.py` (e.g., CSV, JSON, or plain text).

2. **Generate Chimera Visualization Script**:
   - Loads the original PDB file.
   - Highlights predicted binding site residues in red.
   - Uses licorice representation for clarity.
   - Optionally displays molecular surface and electrostatic properties.

3. **Save & Execute Visualization Output**:
   - Saves a **Chimera command script (`.cmd`)** for easy execution.
   - Optionally, runs the script automatically in Chimera.
   - Saves an image (`.png`) of the visualization for reports.

Expected Input:
- The original PDB file from `preprocess.py`.
- Predicted binding site residues output from `predict.py`.

Expected Output:
- A **Chimera command script (`.cmd`)**.
- Optionally, a Chimera **session file (`.cxc`)** or a saved image (`.png`).

Dependencies:
- UCSF Chimera (must be installed and accessible from the command line)
- NumPy, Pandas (for handling residue lists)
- Matplotlib (optional, for additional plots)
"""

import os
import subprocess
import numpy as np
import pandas as pd
from Bio.PDB import PDBParser
import matplotlib.pyplot as plt

def visualize_binding_sites(pdb_file, binding_site_residues, output_dir="chimera_visualization", run_chimera=False):
    """
    Generates a Chimera command script to visualize predicted ligand binding sites.
    
    Parameters:
    - pdb_file (str): Path to the original PDB file.
    - binding_site_residues (list): List of predicted binding site residues (residue numbers).
    - output_dir (str): Directory to save the Chimera visualization script (default: "chimera_visualization").
    - run_chimera (bool): Whether to automatically launch Chimera with the generated script.
    
    Returns:
    - str: Path to the generated Chimera visualization script.
    """

    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Parse the PDB file to extract the first chain ID
    parser = PDBParser(QUIET=True)
    structure = parser.get_structure('protein', pdb_file)
    chain_id = list(structure.get_chains())[0].id  # Assumes first chain; modify if needed

    # Chimera visualization script generation
    script_lines = [
        f"open {pdb_file}",            # Load the PDB file
        f"focus :{chain_id}",          # Focus on the main chain
        "rib",                         # Show backbone ribbon
        "disp",                        # Display all atoms
        "color grey",                  # Set default color to grey
        "repr stick",                  # Use stick representation for better visibility
    ]

    # Highlight predicted binding sites
    for site in binding_site_residues:
        script_lines.append(f"color red :{chain_id}.{site}")  # Highlight in red
        script_lines.append(f"repr licorice :{chain_id}.{site}")  # Use licorice representation for clarity

    # Save the Chimera script
    script_path = os.path.join(output_dir, "visualize_binding_sites.cmd")
    with open(script_path, 'w') as f:
        f.write('\n'.join(script_lines))

    print(f"Chimera visualization script saved to: {script_path}")

    # Optionally run Chimera automatically
    if run_chimera:
        try:
            subprocess.run(["chimera", "--nogui", script_path], check=True)
            print("Chimera visualization executed successfully.")
        except FileNotFoundError:
            print("Error: Chimera not found. Please ensure Chimera is installed and accessible from the command line.")

    return script_path

# Example: Load predicted binding sites from a dummy list
predicted_binding_sites = [12, 24, 35, 48]

# Define the input PDB file
pdb_file_path = "protein_structure.pdb"

# Generate the Chimera visualization script
chimera_script = visualize_binding_sites(pdb_file_path, predicted_binding_sites, run_chimera=False)

# Optional: Generate a histogram of predicted binding sites
plt.figure(figsize=(8, 6))
plt.hist(predicted_binding_sites, bins=range(min(predicted_binding_sites), max(predicted_binding_sites) + 1, 1), 
         color='skyblue', edgecolor='black')
plt.xlabel('Residue Index')
plt.ylabel('Frequency')
plt.title('Predicted Ligand Binding Sites')

# Ensure output directory exists before saving
output_dir = "chimera_visualization"
os.makedirs(output_dir, exist_ok=True)

# Save the histogram as an image
histogram_path = os.path.join(output_dir, 'binding_site_histogram.png')
plt.savefig(histogram_path)
plt.show()

print(f"Binding site histogram saved to: {histogram_path}")

